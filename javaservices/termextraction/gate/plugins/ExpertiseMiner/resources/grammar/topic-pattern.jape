/*
 *  topic-pattern.jape
 *
 * Copyright (c) 1998-2004, The University of Sheffield.
 *
 *  This file is part of GATE (see http://gate.ac.uk/), and is free
 *  software, licenced under the GNU Library General Public License,
 *  Version 2, June 1991 (in the distribution as file licence.html,
 *  and also available at http://gate.ac.uk/gate/licence.html).
 *
 *  Alex Schutz, 2009-02-02
 *
 */

Phase:  TopicPattern
Input:  Token TempContextPattern TempTopicSegment CoordinatingConjunction
Options: control = appelt

MACRO: UP_TO_FOUR_TOKENS
(
 ({Token.category !~ "NN|NNS|JJ|NP|NPS|NNP|NNPS|VBN|CD|VBG",  Token.kind != punctuation})[0,1]
 ({Token.category !~ "NN|NNS|JJ|NP|NPS|NNP|NNPS|VBN|CD|VBG",  Token.kind != punctuation})[0,1]
 ({Token.category !~ "NN|NNS|JJ|NP|NPS|NNP|NNPS|VBN|CD|VBG",  Token.kind != punctuation})[0,1]
 ({Token.category !~ "NN|NNS|JJ|NP|NPS|NNP|NNPS|VBN|CD|VBG",  Token.kind != punctuation})[0,1]
)

/*
MACRO: TOPIC_PATTERN
(
 (
  (
   (
    ({Token.category == NN, Token.kind != punctuation}|
	{Token.category == NP, Token.kind != punctuation}|
	{Token.category == NPS, Token.kind != punctuation}|
	{Token.category == NNP, Token.kind != punctuation}|
	{Token.category == NNPS, Token.kind != punctuation}|
        {Token.category == NNS, Token.kind != punctuation}|
	{Token.category == CD, Token.kind != punctuation})[0,5]
   )
  )|
  (
   ({Token.category == JJ}|{Token.category == VBN}|{Token.category == VBG})
   ({Token.category == CC}|{Token.string =="of"})[1]
  )
 )[0,3]
 ((
  {Token.category==NN, Token.kind != punctuation}|
  {Token.category == NP, Token.kind != punctuation}|
  {Token.category == NPS, Token.kind != punctuation}|
  {Token.category == NNP, Token.kind != punctuation}|
  {Token.category == NNPS, Token.kind != punctuation}|
  {Token.category==NNS, Token.kind != punctuation}|
  {Token.category==VBG, Token.kind != punctuation}
 )[1,5])
)*/

MACRO:TOPIC_SEPARATOR
({Token.string =="of"}|{Token.string =="and"})

MACRO: TOPIC_PATTERN_DETERMINANT
(
({Token.category =~ "NN|NNS|JJ|NP|NPS|NNP|NNPS|CD|VBN|VBG", Token.kind != punctuation})[0,8]
)

MACRO: TOPIC_FIRST_WORD(
({Token.category =~ "NN|NNS|JJ|NP|NPS|NNP|NNPS|VBN|VBG", Token.kind != punctuation})
)

MACRO: TOPIC_HEAD
(
({Token.category =~ "NN|NNS|NP|NPS|NNP|NNPS|VBG", Token.kind != punctuation})
)

MACRO:TOPIC_PATTERN
(
(TOPIC_FIRST_WORD TOPIC_PATTERN_DETERMINANT TOPIC_HEAD)|
(TOPIC_HEAD)
)

/* RULES GO HERE */

Rule: TopicPattern0
Priority:100
/*
(
 ({TempContextPattern.position == "introducing"}):context
 (UP_TO_FOUR_TOKENS)
 (TOPIC_PATTERN):topic
)*/
(
 (({TempContextPattern.position == "introducing"}) | 
  (
   ({TempContextPattern.position == "head", Token.category =~ "NN|NNS|NP|NPS|NNP|NNPS"}) 
   ({Token.string == "of"}|{Token.string == "for"}|{Token.string == "in"})
  )
 ):context
 (UP_TO_FOUR_TOKENS)
 (
  (
   (
    (TOPIC_PATTERN):topic1
    (TOPIC_SEPARATOR)
    (TOPIC_PATTERN):topic2
   ):topic3
  )|
  (
   (TOPIC_PATTERN):topic
  )
 )
):segment
-->
{

  // Simple topic 
  gate.AnnotationSet topic = (gate.AnnotationSet)bindings.get("topic");
  if (topic != null){
  
  // gaining access to token annotation and sorting them
  java.util.ArrayList tokens = new java.util.ArrayList(topic.get("Token", topic.firstNode().getOffset(), topic.lastNode().getOffset()));
  java.util.Collections.sort(tokens, new gate.util.OffsetComparator());
  
  String posSequence = "";   // accumulating pos-sequence here
  String rootSequence = "";   // accumulating root sequence here
  java.util.Iterator tItr = tokens.iterator();
  while (tItr.hasNext()){
    gate.FeatureMap tFeat = ((gate.Annotation)tItr.next()).getFeatures(); 
    posSequence += (String)tFeat.get("category");
    rootSequence +=(String)tFeat.get("root");
    if (tItr.hasNext()) posSequence += " ";
    if (tItr.hasNext()) rootSequence += " ";
  }
  
  // gaining access to context
  gate.AnnotationSet context = (gate.AnnotationSet)bindings.get("context");

  // gaining access to segment
  gate.AnnotationSet segment = (gate.AnnotationSet)bindings.get("segment");

  
  gate.FeatureMap topicfeatures = Factory.newFeatureMap();
  topicfeatures.put("kind", "topicpattern");
  topicfeatures.put("rule", "TopicPattern0");
  topicfeatures.put("POSsequence", posSequence);
  topicfeatures.put("RootSequence", rootSequence);
  try {
    String topicText = doc.getContent().getContent( topic.firstNode().getOffset(), topic.lastNode().getOffset() ).toString();
    String contextText = doc.getContent().getContent( context.firstNode().getOffset(), context.lastNode().getOffset() ).toString();
    String segmentText = doc.getContent().getContent( segment.firstNode().getOffset(), segment.lastNode().getOffset() ).toString();
    
    // adding to features and cleansing the string in the process
    
    topicfeatures.put("topicTextualRepresentation", topicText.replaceAll("-".concat(System.getProperty("line.separator")), "").replaceAll(System.getProperty("line.separator"), " ").replaceAll("\\s+", " ") );
    topicfeatures.put("contextTextualRepresentation", contextText.replaceAll("-".concat(System.getProperty("line.separator")), "").replaceAll(System.getProperty("line.separator"), " ").replaceAll("\\s+", " ")  );
    topicfeatures.put("segmentTextualRepresentation", segmentText.replaceAll("-".concat(System.getProperty("line.separator")), "").replaceAll(System.getProperty("line.separator"), " ").replaceAll("\\s+", " ")  );
    topicfeatures.put("offset", topic.firstNode().getOffset());
  } catch (GateException exn){
    System.err.println(exn.getMessage());
  }
  annotations.add(topic.firstNode(), topic.lastNode(), "Topic", topicfeatures);
  tokens = null;
  }

  // topic 1 
  topic = (gate.AnnotationSet)bindings.get("topic1");
  if (topic != null){
  
  // gaining access to token annotation and sorting them
  java.util.ArrayList tokens = new java.util.ArrayList(topic.get("Token", topic.firstNode().getOffset(), topic.lastNode().getOffset()));
  java.util.Collections.sort(tokens, new gate.util.OffsetComparator());
  
  String posSequence = "";   // accumulating pos-sequence here
  String rootSequence = "";   // accumulating root sequence here
  java.util.Iterator tItr = tokens.iterator();
  while (tItr.hasNext()){
    gate.FeatureMap tFeat = ((gate.Annotation)tItr.next()).getFeatures(); 
    posSequence += (String)tFeat.get("category");
    rootSequence +=(String)tFeat.get("root");
    if (tItr.hasNext()) posSequence += " ";
    if (tItr.hasNext()) rootSequence += " ";
  }
  
  // gaining access to context
  gate.AnnotationSet context = (gate.AnnotationSet)bindings.get("context");

  // gaining access to segment
  gate.AnnotationSet segment = (gate.AnnotationSet)bindings.get("segment");

  
  gate.FeatureMap topicfeatures = Factory.newFeatureMap();
  topicfeatures.put("kind", "topicpattern");
  topicfeatures.put("rule", "TopicPattern0");
  topicfeatures.put("POSsequence", posSequence);
  topicfeatures.put("RootSequence", rootSequence);
  try {
    String topicText = doc.getContent().getContent( topic.firstNode().getOffset(), topic.lastNode().getOffset() ).toString();
    String contextText = doc.getContent().getContent( context.firstNode().getOffset(), context.lastNode().getOffset() ).toString();
    String segmentText = doc.getContent().getContent( segment.firstNode().getOffset(), segment.lastNode().getOffset() ).toString();
    
    // adding to features and cleansing the string in the process
    
    topicfeatures.put("topicTextualRepresentation", topicText.replaceAll("-".concat(System.getProperty("line.separator")), "").replaceAll(System.getProperty("line.separator"), " ").replaceAll("\\s+", " ") );
    topicfeatures.put("contextTextualRepresentation", contextText.replaceAll("-".concat(System.getProperty("line.separator")), "").replaceAll(System.getProperty("line.separator"), " ").replaceAll("\\s+", " ")  );
    topicfeatures.put("segmentTextualRepresentation", segmentText.replaceAll("-".concat(System.getProperty("line.separator")), "").replaceAll(System.getProperty("line.separator"), " ").replaceAll("\\s+", " ")  );
    topicfeatures.put("offset", topic.firstNode().getOffset());
  } catch (GateException exn){
    System.err.println(exn.getMessage());
  }
  annotations.add(topic.firstNode(), topic.lastNode(), "Topic", topicfeatures);
  tokens = null;
  }
  
  
  // same thing for topic 2 
  topic = (gate.AnnotationSet)bindings.get("topic2");
  if (topic != null){
  
  // gaining access to token annotation and sorting them
  java.util.ArrayList tokens = new java.util.ArrayList(topic.get("Token", topic.firstNode().getOffset(), topic.lastNode().getOffset()));
  java.util.Collections.sort(tokens, new gate.util.OffsetComparator());
  
  String posSequence = "";   // accumulating pos-sequence here
  String rootSequence = "";   // accumulating root sequence here
  java.util.Iterator tItr = tokens.iterator();
  while (tItr.hasNext()){
    gate.FeatureMap tFeat = ((gate.Annotation)tItr.next()).getFeatures(); 
    posSequence += (String)tFeat.get("category");
    rootSequence +=(String)tFeat.get("root");
    if (tItr.hasNext()) posSequence += " ";
    if (tItr.hasNext()) rootSequence += " ";
  }
  
  // gaining access to context
  gate.AnnotationSet context = (gate.AnnotationSet)bindings.get("context");

  // gaining access to segment
  gate.AnnotationSet segment = (gate.AnnotationSet)bindings.get("segment");

  
  gate.FeatureMap topicfeatures = Factory.newFeatureMap();
  topicfeatures.put("kind", "topicpattern");
  topicfeatures.put("rule", "TopicPattern0");
  topicfeatures.put("POSsequence", posSequence);
  topicfeatures.put("RootSequence", rootSequence);
  try {
    String topicText = doc.getContent().getContent( topic.firstNode().getOffset(), topic.lastNode().getOffset() ).toString();
    String contextText = doc.getContent().getContent( context.firstNode().getOffset(), context.lastNode().getOffset() ).toString();
    String segmentText = doc.getContent().getContent( segment.firstNode().getOffset(), segment.lastNode().getOffset() ).toString();
    
    // adding to features and cleansing the string in the process
    
    topicfeatures.put("topicTextualRepresentation", topicText.replaceAll("-".concat(System.getProperty("line.separator")), "").replaceAll(System.getProperty("line.separator"), " ").replaceAll("\\s+", " ") );
    topicfeatures.put("contextTextualRepresentation", contextText.replaceAll("-".concat(System.getProperty("line.separator")), "").replaceAll(System.getProperty("line.separator"), " ").replaceAll("\\s+", " ")  );
    topicfeatures.put("segmentTextualRepresentation", segmentText.replaceAll("-".concat(System.getProperty("line.separator")), "").replaceAll(System.getProperty("line.separator"), " ").replaceAll("\\s+", " ")  );
    topicfeatures.put("offset", topic.firstNode().getOffset());
  } catch (GateException exn){
    System.err.println(exn.getMessage());
  }
  annotations.add(topic.firstNode(), topic.lastNode(), "Topic", topicfeatures);
  tokens = null;
  }
  
  
  // same thing for topic 3 
  topic = (gate.AnnotationSet)bindings.get("topic3");
  if (topic != null){
  
  // gaining access to token annotation and sorting them
  java.util.ArrayList tokens = new java.util.ArrayList(topic.get("Token", topic.firstNode().getOffset(), topic.lastNode().getOffset()));
  java.util.Collections.sort(tokens, new gate.util.OffsetComparator());
  
  String posSequence = "";   // accumulating pos-sequence here
  String rootSequence = "";   // accumulating root sequence here
  java.util.Iterator tItr = tokens.iterator();
  while (tItr.hasNext()){
    gate.FeatureMap tFeat = ((gate.Annotation)tItr.next()).getFeatures(); 
    posSequence += (String)tFeat.get("category");
    rootSequence +=(String)tFeat.get("root");
    if (tItr.hasNext()) posSequence += " ";
    if (tItr.hasNext()) rootSequence += " ";
  }
  
  // gaining access to context
  gate.AnnotationSet context = (gate.AnnotationSet)bindings.get("context");

  // gaining access to segment
  gate.AnnotationSet segment = (gate.AnnotationSet)bindings.get("segment");

  
  gate.FeatureMap topicfeatures = Factory.newFeatureMap();
  topicfeatures.put("kind", "topicpattern");
  topicfeatures.put("rule", "TopicPattern0");
  topicfeatures.put("POSsequence", posSequence);
  topicfeatures.put("RootSequence", rootSequence);
  try {
    String topicText = doc.getContent().getContent( topic.firstNode().getOffset(), topic.lastNode().getOffset() ).toString();
    String contextText = doc.getContent().getContent( context.firstNode().getOffset(), context.lastNode().getOffset() ).toString();
    String segmentText = doc.getContent().getContent( segment.firstNode().getOffset(), segment.lastNode().getOffset() ).toString();
    
    // adding to features and cleansing the string in the process
    
    topicfeatures.put("topicTextualRepresentation", topicText.replaceAll("-".concat(System.getProperty("line.separator")), "").replaceAll(System.getProperty("line.separator"), " ").replaceAll("\\s+", " ") );
    topicfeatures.put("contextTextualRepresentation", contextText.replaceAll("-".concat(System.getProperty("line.separator")), "").replaceAll(System.getProperty("line.separator"), " ").replaceAll("\\s+", " ")  );
    topicfeatures.put("segmentTextualRepresentation", segmentText.replaceAll("-".concat(System.getProperty("line.separator")), "").replaceAll(System.getProperty("line.separator"), " ").replaceAll("\\s+", " ")  );
    topicfeatures.put("offset", topic.firstNode().getOffset());
  } catch (GateException exn){
    System.err.println(exn.getMessage());
  }
  annotations.add(topic.firstNode(), topic.lastNode(), "Topic", topicfeatures);
  tokens = null;
  }
  
}
